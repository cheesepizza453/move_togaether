'use client';

import { useState, useRef } from 'react';
import { useRouter } from 'next/navigation';
import { toast } from 'sonner';
import { supabase } from '@/lib/supabase';
import FormStep from '@/components/volunteer/FormStep';
import Step1 from '@/components/volunteer/Step1';
import Step2 from '@/components/volunteer/Step2';
import Step3 from '@/components/volunteer/Step3';
import Preview from '@/components/volunteer/Preview';

const Write = () => {
  const router = useRouter();
  const fileInputRef = useRef(null);

  // 현재 단계 상태
  const [currentStep, setCurrentStep] = useState(1);

  // 폼 데이터 상태
  const [formData, setFormData] = useState({
    // Step 1: 이동 봉사 정보
    title: '',
    departureAddress: '',
    arrivalAddress: '',
    description: '',
    // Step 2: 구조견 정보
    name: '',
    photo: null,
    size: '',
    breed: '',
    // Step 3: 추가 정보
    relatedPostLink: ''
  });

  // 에러 상태
  const [errors, setErrors] = useState({});

  // 사진 미리보기 상태
  const [photoPreview, setPhotoPreview] = useState(null);

  // 로딩 상태
  const [loading, setLoading] = useState(false);

  // 주소 검증 상태
  const [addressValidation, setAddressValidation] = useState({
    departure: { isValid: null, message: '' },
    arrival: { isValid: null, message: '' }
  });


  // 폼 데이터 변경
  const updateFormData = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleGoBack = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    } else {
      router.back();
    }
  };

  const handleNext = () => {
    const newErrors = {};

    if (currentStep === 1) {
      // Step 1 유효성 검사
      if (!formData.title.trim()) {
        newErrors.title = '제목을 입력해주세요.';
      } else if (formData.title.length > 20) {
        newErrors.title = '제목은 20자 이하로 입력해주세요.';
      }

      if (!formData.departureAddress.trim()) {
        newErrors.departureAddress = '출발지 주소를 입력해주세요.';
      } else if (addressValidation.departure.isValid !== true) {
        newErrors.departureAddress = '출발지 주소를 검증해주세요.';
      }

      if (!formData.arrivalAddress.trim()) {
        newErrors.arrivalAddress = '도착지 주소를 입력해주세요.';
      } else if (addressValidation.arrival.isValid !== true) {
        newErrors.arrivalAddress = '도착지 주소를 검증해주세요.';
      }
    } else if (currentStep === 2) {
      // Step 2 유효성 검사
      if (!formData.name.trim()) {
        newErrors.name = '이름을 입력해주세요.';
      } else if (formData.name.length > 20) {
        newErrors.name = '이름은 20자 이하로 입력해주세요.';
      }

      if (!formData.size) {
        newErrors.size = '크기를 선택해주세요.';
      }
    } else if (currentStep === 3) {
      // Step 3 유효성 검사 (URL 형식 검증)
      if (formData.relatedPostLink.trim()) {
        const urlPattern = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/;
        if (!urlPattern.test(formData.relatedPostLink)) {
          newErrors.relatedPostLink = '올바른 URL 형식이 아닙니다.';
        }
      }
    }

    setErrors(newErrors);

    if (Object.keys(newErrors).length === 0) {
      if (currentStep < 3) {
        setCurrentStep(currentStep + 1);
      } else {
        // 미리보기 모드로 전환
        setCurrentStep(4);
      }
    }
  };

  // 주소 유효성 검사 함수 (서버 API를 통해 카카오맵 API 호출)
  const validateAddress = async (address) => {
    try {
      const response = await fetch('/api/validate-address', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ address }),
      });

      const data = await response.json();

      if (!response.ok) {
        console.error('주소 검증 API 오류:', data.error);
        return { isValid: false, message: data.error || '주소 검증 중 오류가 발생했습니다.' };
      }

      return {
        isValid: data.isValid,
        message: data.message
      };
    } catch (error) {
      console.error('주소 검증 오류:', error);
      return { isValid: false, message: '주소 검증 중 오류가 발생했습니다.' };
    }
  };

  const handleSearchAddress = async (type) => {
    const address = type === 'departure' ? formData.departureAddress : formData.arrivalAddress;

    if (!address.trim()) {
      return;
    }

    const validation = await validateAddress(address);

    setAddressValidation(prev => ({
      ...prev,
      [type]: validation
    }));
  };

  // 주소 입력 변경 핸들러
  const handleAddressChange = (type, value) => {
    updateFormData(type === 'departure' ? 'departureAddress' : 'arrivalAddress', value);

    // 주소가 변경되면 검증 상태 초기화
    setAddressValidation(prev => ({
      ...prev,
      [type]: { isValid: null, message: '' }
    }));
  };

  const handlePhotoUpload = (event) => {
    const file = event.target.files[0];
    if (file) {
      // 파일 크기 검증 (500KB 제한)
      if (file.size > 500 * 1024) {
        toast.error('파일 크기는 500KB 이하로 업로드해주세요.');
        return;
      }

      // 이미지 파일 검증
      if (!file.type.startsWith('image/')) {
        toast.error('이미지 파일만 업로드 가능합니다.');
        return;
      }

      // FileReader로 이미지 미리보기 생성
      const reader = new FileReader();
      reader.onload = (e) => {
        const base64String = e.target.result;
        setPhotoPreview(base64String);
        updateFormData('photo', base64String);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleRemovePhoto = () => {
    setPhotoPreview(null);
    updateFormData('photo', null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleSizeChange = (size) => {
    updateFormData('size', size);
  };

  const handleEdit = (step) => {
    setCurrentStep(step);
  };

  const handleSubmit = async () => {
    setLoading(true);

    try {
      // Supabase에서 현재 사용자의 세션 토큰 가져오기
      const { data: { session } } = await supabase.auth.getSession();

      if (!session) {
        toast.error('로그인이 필요합니다.');
        router.push('/login');
        return;
      }

      // 서버로 데이터 전송
      const response = await fetch('/api/posts/volunteer', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${session.access_token}`,
        },
        body: JSON.stringify(formData),
      });

      const result = await response.json();

      if (result.success) {
        toast.success('이동 봉사 요청이 등록되었습니다!');
        router.push('/');
      } else {
        toast.error(result.error || '등록에 실패했습니다.');
      }
    } catch (error) {
      console.error('등록 오류:', error);
      toast.error('등록 중 오류가 발생했습니다.');
    } finally {
      setLoading(false);
    }
  };

  // 다음 버튼 비활성화 조건
  const isNextDisabled = () => {
    if (currentStep === 1) {
      return !formData.title.trim() || 
             !formData.departureAddress.trim() || 
             !formData.description.trim() ||
             addressValidation.departure.isValid !== true ||
             addressValidation.arrival.isValid !== true;
    } else if (currentStep === 2) {
      return !formData.name.trim() || !formData.size;
    }
    return false;
  };

  // 단계별 제목과 설명
  const getStepInfo = () => {
    switch (currentStep) {
      case 1:
        return {
          title: '이동 봉사 정보',
          description: '봉사 활동에 대한 기본 정보를 입력해주세요'
        };
      case 2:
        return {
          title: '강아지 정보',
          description: '이동할 강아지의 정보를 입력해주세요'
        };
      case 3:
        return {
          title: '추가 정보',
          description: '관련 게시글 링크 등 추가 정보를 입력해주세요'
        };
      default:
        return {
          title: '이동 봉사 요청',
          description: '봉사 활동을 등록해주세요'
        };
    }
  };

  const stepInfo = getStepInfo();

  // 미리보기 단계인 경우
  if (currentStep === 4) {
    return (
      <div className="min-h-screen bg-gray-50">
        {/* 헤더 */}
        <div className="bg-white border-b border-gray-200 px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center">
              <button
                onClick={handleGoBack}
                className="mr-3 p-2 hover:bg-gray-100 rounded-full transition-colors"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <div>
                <h1 className="text-xl font-bold text-gray-900">이동 봉사 요청 미리보기</h1>
                <p className="text-sm text-gray-600">입력하신 정보를 확인하고 등록해주세요</p>
              </div>
            </div>
          </div>
        </div>

        {/* 컨텐츠 */}
        <div className="px-4 py-6">
          <Preview
            formData={formData}
            photoPreview={photoPreview}
            onEdit={handleEdit}
            onSubmit={handleSubmit}
            loading={loading}
          />
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-white">
      {/* 헤더 */}
      <div className="px-4 py-3 border-b border-gray-200">
        <div className="flex items-center">
          <button
            onClick={handleGoBack}
            className="mr-4 p-2 hover:bg-gray-100 rounded-full transition-colors"
          >
            <ArrowLeft size={20} className="text-gray-600" />
          </button>
          <h1 className="text-lg font-semibold">
            {currentStep === 4 ? '이동 봉사 요청 미리보기' : '이동 봉사 요청'}
          </h1>
        </div>

        {/* 진행률 표시 */}
        {currentStep < 4 && (
          <div className="flex justify-center mt-4 space-x-2">
            {[1, 2, 3].map((step) => (
              <div
                key={step}
                className={`w-2 h-2 rounded-full ${
                  step <= currentStep ? 'bg-yellow-500' : 'bg-gray-300'
                } ${step < currentStep ? 'flex items-center justify-center' : ''}`}
              >
                {step < currentStep && (
                  <div className="w-1 h-1 bg-white rounded-full"></div>
                )}
              </div>
            ))}
          </div>
        )}
      </div>

      {/* 메인 컨텐츠 */}
      <div className="px-6 py-8">
        {currentStep === 1 && (
          <>
            <div className="mb-6">
              <h2 className="text-xl font-bold text-gray-800 mb-2">이동 봉사 정보</h2>
              <p className="text-sm text-gray-500">*표시는 필수 입력 정보입니다.</p>
            </div>

            <div className="space-y-6">
              {/* 제목 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  제목 *
                </label>
                <input
                  type="text"
                  value={formData.title}
                  onChange={(e) => updateFormData('title', e.target.value)}
                  placeholder="제목을 입력해주세요."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                  maxLength={20}
                />
                <div className="flex justify-between items-center mt-1">
                  <p className="text-xs text-gray-500">특수문자 불가</p>
                  <p className="text-xs text-gray-400">{formData.title.length}/20</p>
                </div>
                {errors.title && (
                  <p className="text-xs text-red-500 mt-1">{errors.title}</p>
                )}
              </div>

              {/* 이동경로 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  이동경로 *
                </label>

                {/* 출발지 */}
                <div className="mb-4">
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={formData.departureAddress}
                      onChange={(e) => handleAddressChange('departure', e.target.value)}
                      placeholder="출발지 주소를 검색해 주세요."
                      className={`flex-1 px-4 py-3 border rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-colors ${
                        addressValidation.departure.isValid === true
                          ? 'border-green-500 bg-green-50'
                          : addressValidation.departure.isValid === false
                          ? 'border-red-500 bg-red-50'
                          : 'border-gray-300'
                      }`}
                    />
                    <button
                      type="button"
                      onClick={() => handleSearchAddress('departure')}
                      disabled={!formData.departureAddress.trim() || addressValidation.departure.isValid === true}
                      className={`px-4 py-3 rounded-lg transition-colors whitespace-nowrap ${
                        !formData.departureAddress.trim() || addressValidation.departure.isValid === true
                          ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                          : 'bg-yellow-500 text-white hover:bg-yellow-600'
                      }`}
                    >
                      출발지 검색
                    </button>
                  </div>
                  <p className="text-xs text-gray-500 mt-1">출발지 주소를 입력해 주세요.</p>
                  {addressValidation.departure.message && addressValidation.departure.isValid === false && (
                    <p className="text-xs text-red-500 mt-1">
                      {addressValidation.departure.message}
                    </p>
                  )}
                  {errors.departureAddress && (
                    <p className="text-xs text-red-500 mt-1">{errors.departureAddress}</p>
                  )}
                </div>

                {/* 도착지 */}
                <div>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={formData.arrivalAddress}
                      onChange={(e) => handleAddressChange('arrival', e.target.value)}
                      placeholder="도착지 주소를 검색해 주세요."
                      className={`flex-1 px-4 py-3 border rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent transition-colors ${
                        addressValidation.arrival.isValid === true
                          ? 'border-green-500 bg-green-50'
                          : addressValidation.arrival.isValid === false
                          ? 'border-red-500 bg-red-50'
                          : 'border-gray-300'
                      }`}
                    />
                    <button
                      type="button"
                      onClick={() => handleSearchAddress('arrival')}
                      disabled={!formData.arrivalAddress.trim() || addressValidation.arrival.isValid === true}
                      className={`px-4 py-3 rounded-lg transition-colors whitespace-nowrap ${
                        !formData.arrivalAddress.trim() || addressValidation.arrival.isValid === true
                          ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                          : 'bg-yellow-500 text-white hover:bg-yellow-600'
                      }`}
                    >
                      도착지 검색
                    </button>
                  </div>
                  {addressValidation.arrival.message && addressValidation.arrival.isValid === false && (
                    <p className="text-xs text-red-500 mt-1">
                      {addressValidation.arrival.message}
                    </p>
                  )}
                  {errors.arrivalAddress && (
                    <p className="text-xs text-red-500 mt-1">{errors.arrivalAddress}</p>
                  )}
                </div>
              </div>

              {/* 설명 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  설명
                </label>
                <textarea
                  value={formData.description}
                  onChange={(e) => updateFormData('description', e.target.value)}
                  placeholder="이번 이동 봉사에 대해 설명해 주세요.&#10;(희망 일정, 컨넬 지원 여부, 구조견에 대한 설명, 봉사자님께 전하는 말 등)"
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent h-32 resize-none"
                  maxLength={1000}
                />
                <p className="text-xs text-gray-400 mt-1 text-right">{formData.description.length}/1000</p>
              </div>
            </div>

            {/* 다음 버튼 */}
            <button
              onClick={handleNext}
              disabled={
                !formData.title.trim() ||
                !formData.departureAddress.trim() ||
                !formData.arrivalAddress.trim() ||
                addressValidation.departure.isValid !== true ||
                addressValidation.arrival.isValid !== true
              }
              className={`w-full mt-8 py-4 rounded-lg font-semibold transition-colors ${
                !formData.title.trim() ||
                !formData.departureAddress.trim() ||
                !formData.arrivalAddress.trim() ||
                addressValidation.departure.isValid !== true ||
                addressValidation.arrival.isValid !== true
                  ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                  : 'bg-gray-500 text-white hover:bg-gray-600'
              }`}
            >
              다음으로
            </button>
          </>
        )}

        {currentStep === 2 && (
          <>
            <div className="mb-6">
              <h2 className="text-xl font-bold text-gray-800 mb-2">구조견 정보</h2>
              <p className="text-sm text-gray-500">*표시는 필수 입력 정보입니다.</p>
            </div>

            <div className="space-y-6">
              {/* 이름 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  이름 *
                </label>
                <input
                  type="text"
                  value={formData.name}
                  onChange={(e) => updateFormData('name', e.target.value)}
                  placeholder="이름을 입력해주세요."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                  maxLength={20}
                />
                <p className="text-xs text-gray-400 mt-1 text-right">{formData.name.length}/20</p>
                {errors.name && (
                  <p className="text-xs text-red-500 mt-1">{errors.name}</p>
                )}
              </div>

              {/* 사진 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  사진
                </label>
                <p className="text-xs text-gray-500 mb-3">총 1장의 이미지를 업로드 할 수 있습니다. (최대 500KB)</p>

                <div className="flex gap-3">
                  {/* 사진 미리보기 */}
                  {photoPreview ? (
                    <div className="relative">
                      <img
                        src={photoPreview}
                        alt="구조견 사진"
                        className="w-20 h-20 object-cover rounded-lg border border-gray-300"
                      />
                      <button
                        type="button"
                        onClick={handleRemovePhoto}
                        className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600 transition-colors"
                      >
                        <X size={14} />
                      </button>
                    </div>
                  ) : (
                    <button
                      type="button"
                      onClick={() => fileInputRef.current?.click()}
                      className="w-20 h-20 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center hover:border-yellow-500 transition-colors"
                    >
                      <Plus size={24} className="text-gray-400" />
                    </button>
                  )}
                </div>

                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handlePhotoUpload}
                  className="hidden"
                />
              </div>

              {/* 크기 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  크기 *
                </label>
                <p className="text-xs text-gray-500 mb-3">소형: 5kg | 중소형: 5.1kg~8kg | 중형: 8.1kg~20kg | 대형: 20.1kg</p>

                <div className="grid grid-cols-2 gap-3">
                  {sizeOptions.map((option) => (
                    <button
                      key={option.value}
                      type="button"
                      onClick={() => handleSizeChange(option.value)}
                      className={`p-3 rounded-lg border-2 transition-colors ${
                        formData.size === option.value
                          ? 'border-yellow-500 bg-yellow-50 text-yellow-700'
                          : 'border-gray-300 hover:border-yellow-300'
                      }`}
                    >
                      <div className="text-sm font-medium">{option.label}</div>
                      <div className="text-xs text-gray-500">{option.description}</div>
                    </button>
                  ))}
                </div>
                {errors.size && (
                  <p className="text-xs text-red-500 mt-1">{errors.size}</p>
                )}
              </div>

              {/* 견종 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  견종
                </label>
                <input
                  type="text"
                  value={formData.breed}
                  onChange={(e) => updateFormData('breed', e.target.value)}
                  placeholder="견종을 입력하세요."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                  maxLength={20}
                />
                <p className="text-xs text-gray-400 mt-1 text-right">{formData.breed.length}/20</p>
              </div>
            </div>

            {/* 다음 버튼 */}
            <button
              onClick={handleNext}
              className="w-full mt-8 py-4 bg-yellow-500 text-white rounded-lg font-semibold hover:bg-yellow-600 transition-colors"
            >
              다음으로
            </button>
          </>
        )}

        {currentStep === 3 && (
          <>
            <div className="mb-6">
              <h2 className="text-xl font-bold text-gray-800 mb-2">추가 정보</h2>
            </div>

            <div className="space-y-6">
              {/* 관련 게시물 링크 */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  관련 게시물 링크
                </label>
                <input
                  type="url"
                  value={formData.relatedPostLink}
                  onChange={(e) => updateFormData('relatedPostLink', e.target.value)}
                  placeholder="보호견과 관련된 게시물 링크를 입력해 주세요."
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-yellow-500 focus:border-transparent"
                />
                {errors.relatedPostLink && (
                  <p className="text-xs text-red-500 mt-1">{errors.relatedPostLink}</p>
                )}
              </div>
            </div>

            {/* 미리보기 버튼 */}
            <button
              onClick={handleNext}
              className="w-full mt-8 py-4 bg-yellow-500 text-white rounded-lg font-semibold hover:bg-yellow-600 transition-colors"
            >
              미리보기
            </button>
          </>
        )}

        {currentStep === 4 && (
          <>
            <div className="space-y-8">
              {/* 1단계: 이동 봉사 정보 */}
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-bold text-gray-800">이동 봉사 정보</h2>
                  <button
                    onClick={() => handleEdit(1)}
                    className="flex items-center text-yellow-600 hover:text-yellow-700 transition-colors"
                  >
                    <Edit3 size={16} className="mr-1" />
                    <span className="text-sm">수정</span>
                  </button>
                </div>

                <div className="space-y-3">
                  <div>
                    <span className="text-sm font-medium text-gray-600">제목:</span>
                    <p className="text-gray-800">{formData.title}</p>
                  </div>

                  <div>
                    <span className="text-sm font-medium text-gray-600">출발지:</span>
                    <p className="text-gray-800">{formData.departureAddress}</p>
                  </div>

                  <div>
                    <span className="text-sm font-medium text-gray-600">도착지:</span>
                    <p className="text-gray-800">{formData.arrivalAddress}</p>
                  </div>

                  {formData.description && (
                    <div>
                      <span className="text-sm font-medium text-gray-600">설명:</span>
                      <p className="text-gray-800 whitespace-pre-wrap">{formData.description}</p>
                    </div>
                  )}
                </div>
              </div>

              {/* 2단계: 구조견 정보 */}
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-bold text-gray-800">구조견 정보</h2>
                  <button
                    onClick={() => handleEdit(2)}
                    className="flex items-center text-yellow-600 hover:text-yellow-700 transition-colors"
                  >
                    <Edit3 size={16} className="mr-1" />
                    <span className="text-sm">수정</span>
                  </button>
                </div>

                <div className="space-y-3">
                  <div>
                    <span className="text-sm font-medium text-gray-600">이름:</span>
                    <p className="text-gray-800">{formData.name}</p>
                  </div>

                  {formData.photo && (
                    <div>
                      <span className="text-sm font-medium text-gray-600">사진:</span>
                      <div className="mt-2">
                        <img
                          src={formData.photo}
                          alt="구조견 사진"
                          className="w-32 h-32 object-cover rounded-lg border border-gray-300"
                        />
                      </div>
                    </div>
                  )}

                  <div>
                    <span className="text-sm font-medium text-gray-600">크기:</span>
                    <p className="text-gray-800">{getSizeLabel(formData.size)}</p>
                  </div>

                  {formData.breed && (
                    <div>
                      <span className="text-sm font-medium text-gray-600">견종:</span>
                      <p className="text-gray-800">{formData.breed}</p>
                    </div>
                  )}
                </div>
              </div>

              {/* 3단계: 추가 정보 */}
              <div className="bg-gray-50 rounded-lg p-6">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-lg font-bold text-gray-800">추가 정보</h2>
                  <button
                    onClick={() => handleEdit(3)}
                    className="flex items-center text-yellow-600 hover:text-yellow-700 transition-colors"
                  >
                    <Edit3 size={16} className="mr-1" />
                    <span className="text-sm">수정</span>
                  </button>
                </div>

                <div className="space-y-3">
                  {formData.relatedPostLink ? (
                    <div>
                      <span className="text-sm font-medium text-gray-600">관련 게시물 링크:</span>
                      <a
                        href={formData.relatedPostLink}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 hover:text-blue-800 underline block mt-1 break-all"
                      >
                        {formData.relatedPostLink}
                      </a>
                    </div>
                  ) : (
                    <p className="text-gray-500 text-sm">관련 게시물 링크가 없습니다.</p>
                  )}
                </div>
              </div>
            </div>

            {/* 제출 버튼 */}
            <div className="mt-8 space-y-3">
              <button
                onClick={handleSubmit}
                disabled={loading}
                className={`w-full py-4 rounded-lg font-semibold transition-colors ${
                  loading
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : 'bg-yellow-500 text-white hover:bg-yellow-600'
                }`}
              >
                {loading ? '등록 중...' : '이동 봉사 요청 등록하기'}
              </button>

              <button
                onClick={() => setCurrentStep(1)}
                className="w-full py-3 text-gray-600 hover:text-gray-800 transition-colors"
              >
                처음부터 다시 작성하기
              </button>
            </div>
          </>
        )}
      </div>
    </div>
  );
};

export default Write;